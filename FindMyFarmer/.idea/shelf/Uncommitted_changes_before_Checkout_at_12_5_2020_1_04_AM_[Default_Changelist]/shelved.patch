Index: app/src/main/java/sheridan/capstone/findmyfarmer/Farmer/View/ProductManagement.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sheridan.capstone.findmyfarmer.Farmer.View\r\n\r\nimport android.content.Context\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.drawable.Drawable\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Base64\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport com.android.volley.Request\r\nimport com.android.volley.Response\r\nimport com.android.volley.toolbox.JsonObjectRequest\r\nimport kotlinx.android.synthetic.main.fragment_product_management.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONException\r\nimport sheridan.capstone.findmyfarmer.Database.DatabaseAPIHandler\r\nimport sheridan.capstone.findmyfarmer.Entities.Product\r\nimport sheridan.capstone.findmyfarmer.R\r\nimport com.android.volley.RequestQueue\r\nimport com.android.volley.toolbox.Volley\r\nimport com.google.firebase.storage.StorageReference\r\nimport kotlinx.android.synthetic.main.activity_account_settings.*\r\nimport kotlinx.android.synthetic.main.farmer_info_card.*\r\nimport sheridan.capstone.findmyfarmer.Database.AsyncResponse\r\nimport sheridan.capstone.findmyfarmer.ImageHandler.DirectoryName\r\nimport sheridan.capstone.findmyfarmer.ImageHandler.FirebaseImagehandler\r\nimport sheridan.capstone.findmyfarmer.ImageHandler.StorageResponse\r\nimport java.io.File\r\nimport java.nio.file.Files\r\nimport java.util.*\r\nimport kotlin.collections.ArrayList\r\n\r\n\r\nclass ProductManagement : Fragment() {\r\n    private lateinit var requestQueue: RequestQueue\r\n    private lateinit var fh:FirebaseImagehandler\r\n    private lateinit var file:File\r\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {\r\n\r\n        val view: View = inflater.inflate(R.layout.fragment_product_management, container, false)\r\n        requestQueue= Volley.newRequestQueue(activity?.applicationContext)\r\n        fh = FirebaseImagehandler(DirectoryName.Farm,1,activity?.applicationContext)\r\n\r\n        storeAPIDataintoDB(view)\r\n\r\n\r\n        // Inflate the layout for this fragment\r\n        return view\r\n    }\r\n\r\n   @RequiresApi(Build.VERSION_CODES.O)\r\n   private fun storeAPIDataintoDB(view: View){\r\n       lateinit var byteArray:ByteArray\r\n\r\n        var randomCategory: String\r\n\r\n        val productName = view.findViewById<TextView>(R.id.nME)\r\n        val productCategory= view.findViewById<TextView>(R.id.produce_cate)\r\n\r\n        //Lists and objects\r\n       val productList = ArrayList<Product>()\r\n        val categories = listOf<String>(\"Fruits\",\"Vegetables\",\"Rice\",\"Grain\",\"Meat\",\"Fish\",\"Kosher\",\"Halal\",\"Vegan\")\r\n\r\n        //api keys & JSON\r\n        val apiKey =\"87cbc6eb7d3548bd9b95d1f715621c20\"\r\n        val url = \"https://api.spoonacular.com/food/ingredients/search?apiKey=$apiKey&query=apple\"\r\n       var productlist= JSONArray()\r\n\r\n\r\n        val req = JsonObjectRequest(Request.Method.GET, url, null, Response.Listener {\r\n                response -> try{\r\n         val c =  DatabaseAPIHandler(activity?.applicationContext, AsyncResponse {\"yay\"})\r\n            productlist = response.getJSONArray(\"results\")\r\n\r\n            for (i in 0 until productlist.length()){\r\n                val produce = productlist.getJSONObject(i)\r\n\r\n                val id = produce.getInt(\"id\")\r\n\r\n                val img = produce.get(\"image\")\r\n                val pName = produce.getString(\"name\")\r\n\r\n                productName.text=pName\r\n                file = File(img.toString())\r\n                byteArray= Files.readAllBytes(file.toPath())\r\n\r\n                randomCategory = categories[Math.random().toInt() * (categories.size - 0) + 1]\r\n                productCategory.text=randomCategory\r\n                //converts image to Bitmap then uploads to view\r\n              /* var convtoBit = Base64.decode(byteArray,1)\r\n                val image = BitmapFactory.decodeByteArray(convtoBit, 0, convtoBit.size)\r\n\r\n                fh.UploadImageToFirebase(image,object:StorageResponse{\r\n\r\n                    override fun processFinish(\r\n                        response: MutableList<StorageReference>?,\r\n                        bitmap: Optional<Bitmap>?,\r\n                        Url: Optional<String>?\r\n                    ) {\r\n                    }\r\n\r\n                    override fun OnErrorListener(error: String?) {\r\n                        print(error)\r\n                    }\r\n                })*/\r\n\r\n\r\n\r\n                //uploads certain values to db\r\n                productList += Product(id, pName, randomCategory)\r\n\r\n            }\r\n            c.execute(\"/addProducts\",productlist)\r\n\r\n        } catch (e: JSONException){\r\n            e.printStackTrace()\r\n        }\r\n            return@Listener\r\n        }, { error -> error.printStackTrace() })\r\n\r\n        //after setting up json object, requests call to api\r\n       requestQueue.add(req)\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sheridan/capstone/findmyfarmer/Farmer/View/ProductManagement.kt	(revision f1feb851d3e433e3e1c490cdfaebc845e9ee9003)
+++ app/src/main/java/sheridan/capstone/findmyfarmer/Farmer/View/ProductManagement.kt	(date 1606828864777)
@@ -42,6 +42,7 @@
     private lateinit var requestQueue: RequestQueue
     private lateinit var fh:FirebaseImagehandler
     private lateinit var file:File
+    @RequiresApi(Build.VERSION_CODES.O)
     override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View {
 
         val view: View = inflater.inflate(R.layout.fragment_product_management, container, false)
@@ -90,7 +91,7 @@
                 productName.text=pName
                 file = File(img.toString())
                 byteArray= Files.readAllBytes(file.toPath())
-
+                productName.text=byteArray.toString()
                 randomCategory = categories[Math.random().toInt() * (categories.size - 0) + 1]
                 productCategory.text=randomCategory
                 //converts image to Bitmap then uploads to view
Index: app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/ProductListToView.kt
===================================================================
--- app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/ProductListToView.kt	(date 1606989107310)
+++ app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/ProductListToView.kt	(date 1606989107310)
@@ -0,0 +1,36 @@
+package sheridan.capstone.findmyfarmer.Customer.Controller
+
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import androidx.recyclerview.widget.RecyclerView
+import sheridan.capstone.findmyfarmer.Entities.Product
+import sheridan.capstone.findmyfarmer.R
+
+class ProductListToView(val FruitList: ArrayList<Product>, private val listener:ImageListToView.OnItemClickListener)
+    : RecyclerView.Adapter<ProductListToView.MyViewHolder>(){
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {
+        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.farmer_listing, parent, false)
+        return MyViewHolder(
+            itemView
+        )
+    }
+
+    inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView), View.OnClickListener {
+
+
+        override fun onClick(v: View?) {
+            TODO("Not yet implemented")
+        }
+
+    }
+
+    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {
+        TODO("Not yet implemented")
+    }
+
+    override fun getItemCount(): Int {
+        TODO("Not yet implemented")
+    }
+
+}
\ No newline at end of file
