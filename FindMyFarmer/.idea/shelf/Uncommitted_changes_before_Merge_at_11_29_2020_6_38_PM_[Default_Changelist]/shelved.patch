Index: app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Model/FollowingDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sheridan.capstone.findmyfarmer.Customer.Model\r\n\r\nimport android.app.AlertDialog\r\nimport android.app.Dialog\r\nimport android.os.Bundle\r\nimport android.view.View\r\nimport android.widget.Button\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatDialogFragment\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport sheridan.capstone.findmyfarmer.R\r\n\r\nprivate lateinit var Following_Image : ImageView\r\nprivate lateinit var Add_To_Following : Button\r\nprivate lateinit var FarmerImage : ImageView\r\nprivate lateinit var FarmerName: TextView\r\nprivate  var Image : Int =0\r\nprivate var Farmer_Name_View = \"\"\r\nprivate var Farmer_City_View = \"\"\r\nprivate var Farmer_Rating_View = 0f\r\nprivate var Farmer_Desc_View = \"\"\r\n\r\n\r\nclass FollowingDialog: AppCompatDialogFragment() {\r\n\r\n\r\n\r\n    override fun onCreateDialog(savedInstanceState: Bundle?): Dialog {\r\n        val builder: AlertDialog.Builder = AlertDialog.Builder(activity)\r\n        val inflater = requireActivity().layoutInflater\r\n        val view: View = inflater.inflate(R.layout.following_dialog, null)\r\n\r\n        FarmerImage = view.findViewById(R.id.Image_Following)\r\n        FarmerName = view.findViewById(R.id.Farmers_Name)\r\n        Add_To_Following = view.findViewById(R.id.Following)\r\n\r\n        val viewModel = ViewModelProvider(requireActivity()).get(SharedViewModel::class.java)\r\n\r\n        FarmerName.text= viewModel.getFarmer_Name().value\r\n        Farmer_Name_View = FarmerName.text.toString()\r\n\r\n        Farmer_City_View = viewModel.getFarmer_City().value.toString()\r\n\r\n\r\n       Farmer_Desc_View = viewModel.getFarmer_Desc().value.toString()\r\n\r\n        Image = viewModel.getImage().value!!.toInt()\r\n\r\n\r\n\r\n        Farmer_Rating_View = viewModel.getFarmer_Rating().value!!.toFloat()\r\n\r\n\r\n\r\n        builder.setView(view)\r\n        FarmerName.setText(\r\n            Farmer_Name_View\r\n        )\r\n        FarmerImage.setImageResource(\r\n            Image\r\n        )\r\n\r\n        Add_To_Following.setOnClickListener {\r\n//add farmer to the following table.\r\n            dialog?.dismiss()\r\n        }\r\n        return builder.create()\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Model/FollowingDialog.kt	(revision eeade8116719d756d0b10fe29f2f940f1eb2593d)
+++ app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Model/FollowingDialog.kt	(date 1606683125853)
@@ -37,21 +37,15 @@
 
         val viewModel = ViewModelProvider(requireActivity()).get(SharedViewModel::class.java)
 
-        FarmerName.text= viewModel.getFarmer_Name().value
+        FarmerName.text= viewModel.getFarmData().value!!.businessName
         Farmer_Name_View = FarmerName.text.toString()
 
-        Farmer_City_View = viewModel.getFarmer_City().value.toString()
-
+        Farmer_City_View = viewModel.getFarmData().value!!.city
 
-       Farmer_Desc_View = viewModel.getFarmer_Desc().value.toString()
 
-        Image = viewModel.getImage().value!!.toInt()
+        Farmer_Desc_View = viewModel.getFarmData().value!!.businessDescription
 
-
-
-        Farmer_Rating_View = viewModel.getFarmer_Rating().value!!.toFloat()
-
-
+        //Image = viewModel.getImage().value!!.toInt()
 
         builder.setView(view)
         FarmerName.setText(
Index: app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/FarmerGenerateList.kt
===================================================================
--- app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/FarmerGenerateList.kt	(revision eeade8116719d756d0b10fe29f2f940f1eb2593d)
+++ app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/FarmerGenerateList.kt	(revision eeade8116719d756d0b10fe29f2f940f1eb2593d)
@@ -1,94 +0,0 @@
-package sheridan.capstone.findmyfarmer.Customer.Controller
-
-import sheridan.capstone.findmyfarmer.R
-import sheridan.capstone.findmyfarmer.Customer.Model.FarmerData
-import sheridan.capstone.findmyfarmer.Customer.Model.ListData
-
-class FarmerGenerateList {
-
-    val FarmerData : FarmerData =
-        FarmerData()
-
-
-
-
-
-
-    fun GenerateList(size: Int): List<ListData> {
-        val list = ArrayList<ListData>()
-        for (i in 0 until size) {
-            val drawable = when (i % 3) {
-                0 -> R.drawable.test1
-                1 -> R.drawable.test3
-                2 -> R.drawable.test3
-                3 -> R.drawable.test3
-                4 -> R.drawable.test3
-
-                else -> R.drawable.test1
-            }
-            if (i == 0) {
-                val item =
-                    ListData(
-                        drawable,
-                        FarmerData.getFarmerName()[i],
-                        FarmerData.getFarmerDesc()[i],
-                        FarmerData.getFarmerRating()[i],
-                        FarmerData.getFarmerCity()[i],
-
-                        )
-                list += item
-
-            } else if (i == 1) {
-                val item =
-                    ListData(
-                        drawable,
-                        FarmerData.getFarmerName()[i],
-                        FarmerData.getFarmerDesc()[i],
-                        FarmerData.getFarmerRating()[i],
-                        FarmerData.getFarmerCity()[i],
-
-                        )
-                list += item
-
-            } else if (i == 2) {
-                val item =
-                    ListData(
-                        drawable,
-                        FarmerData.getFarmerName()[i],
-                        FarmerData.getFarmerDesc()[i],
-                        FarmerData.getFarmerRating()[i],
-                        FarmerData.getFarmerCity()[i],
-
-                        )
-                list += item
-
-            } else if (i == 3) {
-                val item =
-                    ListData(
-                        drawable,
-                        FarmerData.getFarmerName()[i],
-                        FarmerData.getFarmerDesc()[i],
-                        FarmerData.getFarmerRating()[i],
-                        FarmerData.getFarmerCity()[i],
-
-                        )
-                list += item
-
-            } else if (i == 4) {
-                val item =
-                    ListData(
-                        drawable,
-                        FarmerData.getFarmerName()[i],
-                        FarmerData.getFarmerDesc()[i],
-                        FarmerData.getFarmerRating()[i],
-                        FarmerData.getFarmerCity()[i],
-
-
-                        )
-                list += item
-
-            }
-        }
-        return list
-    }
-}
\ No newline at end of file
Index: app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/FarmerListToView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sheridan.capstone.findmyfarmer.Customer.Controller\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.RatingBar\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.makeramen.roundedimageview.RoundedImageView\r\nimport kotlinx.android.synthetic.main.farmer_listing.view.*\r\nimport sheridan.capstone.findmyfarmer.R\r\nimport sheridan.capstone.findmyfarmer.Customer.Model.ListData\r\n\r\n\r\nclass FarmerListToView (private val FarmerList: List<ListData>, private val listener: OnItemClickListener)\r\n    : RecyclerView.Adapter<FarmerListToView.MyViewHolder>() {\r\n\r\n\r\n\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\r\n        val itemView = LayoutInflater.from(parent.context).inflate(\r\n            R.layout.farmer_listing,\r\n            parent, false\r\n        )\r\n        return MyViewHolder(\r\n            itemView\r\n        )\r\n    }\r\n\r\n    override fun getItemCount() = FarmerList.size\r\n\r\n    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\r\n\r\n\r\n        val currentItem = FarmerList[position]\r\n        holder.imageView.setImageResource(currentItem.imageResouce)\r\n        holder.Farmer_Name.text = currentItem.Farmer_Name\r\n        holder.Farmers_Desc.text = currentItem.Farmer_Desc\r\n        holder.Rating.rating = currentItem.Farmer_Rating\r\n        holder.Farmer_City.text = currentItem.Farmer_City\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView),View.OnClickListener {\r\n\r\n\r\n        val imageView: RoundedImageView = itemView.ImageView\r\n        val Farmer_Name: TextView = itemView.Name\r\n        val Farmers_Desc: TextView = itemView.Desc\r\n        val Rating: RatingBar = itemView.rating\r\n        val Farmer_City: TextView = itemView.City\r\n\r\n\r\n\r\n\r\n        init {\r\n            itemView.setOnClickListener(this)\r\n        }\r\n\r\n\r\n        override fun onClick(v: View?) {\r\n            val position = adapterPosition\r\n            if (position != RecyclerView.NO_POSITION) {\r\n                listener.onItemClick(position)\r\n            }\r\n\r\n        }\r\n    }\r\n        interface OnItemClickListener{\r\n            fun onItemClick(position: Int)\r\n        }\r\n\r\n\r\n    }\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/FarmerListToView.kt	(revision eeade8116719d756d0b10fe29f2f940f1eb2593d)
+++ app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/FarmerListToView.kt	(date 1606682845854)
@@ -1,84 +1,69 @@
-package sheridan.capstone.findmyfarmer.Customer.Controller
+package sheridan.capstone.findmyfarmer.FarmerListing.Controller
 
+import android.app.Activity
+import android.graphics.Bitmap
 import android.view.LayoutInflater
 import android.view.View
 import android.view.ViewGroup
 import android.widget.RatingBar
 import android.widget.TextView
+import androidx.lifecycle.ViewModelProvider
 import androidx.recyclerview.widget.RecyclerView
+import com.google.firebase.storage.StorageReference
 import com.makeramen.roundedimageview.RoundedImageView
 import kotlinx.android.synthetic.main.farmer_listing.view.*
+import sheridan.capstone.findmyfarmer.Customer.Model.SharedViewModel
+import sheridan.capstone.findmyfarmer.Entities.Farm
+import sheridan.capstone.findmyfarmer.ImageHandler.DirectoryName
+import sheridan.capstone.findmyfarmer.ImageHandler.FirebaseImagehandler
+import sheridan.capstone.findmyfarmer.ImageHandler.StorageResponse
 import sheridan.capstone.findmyfarmer.R
-import sheridan.capstone.findmyfarmer.Customer.Model.ListData
-
 
-class FarmerListToView (private val FarmerList: List<ListData>, private val listener: OnItemClickListener)
-    : RecyclerView.Adapter<FarmerListToView.MyViewHolder>() {
 
-
-
+class FarmListToView (val FarmList: ArrayList<Farm>, private val listener:OnItemClickListener)
+    : RecyclerView.Adapter<FarmListToView.MyViewHolder>() {
 
     override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {
-        val itemView = LayoutInflater.from(parent.context).inflate(
-            R.layout.farmer_listing,
-            parent, false
-        )
+        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.farmer_listing, parent, false)
         return MyViewHolder(
             itemView
         )
     }
 
-    override fun getItemCount() = FarmerList.size
+    override fun getItemCount() = FarmList.size
 
     override fun onBindViewHolder(holder: MyViewHolder, position: Int) {
-
-
-        val currentItem = FarmerList[position]
-        holder.imageView.setImageResource(currentItem.imageResouce)
-        holder.Farmer_Name.text = currentItem.Farmer_Name
-        holder.Farmers_Desc.text = currentItem.Farmer_Desc
-        holder.Rating.rating = currentItem.Farmer_Rating
-        holder.Farmer_City.text = currentItem.Farmer_City
-
-
-
-
+        val currentItem = FarmList[position]
 
-    }
+        if (currentItem != null) {
+            holder.imageView.setImageBitmap(currentItem.primaryImage)
+            holder.Farm_Name.text = currentItem.businessName
+            holder.Farm_Desc.text = currentItem.businessDescription
+            holder.Rating.rating = currentItem.businessRating
+            holder.Farm_City.text = currentItem.city
+        }
 
-
-
-
+    }
 
     inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView),View.OnClickListener {
 
-
         val imageView: RoundedImageView = itemView.ImageView
-        val Farmer_Name: TextView = itemView.Name
-        val Farmers_Desc: TextView = itemView.Desc
+        val Farm_Name: TextView = itemView.Name
+        val Farm_Desc: TextView = itemView.Desc
         val Rating: RatingBar = itemView.rating
-        val Farmer_City: TextView = itemView.City
-
+        val Farm_City: TextView = itemView.City
 
 
-
-        init {
-            itemView.setOnClickListener(this)
-        }
-
+        init { itemView.setOnClickListener(this) }
 
         override fun onClick(v: View?) {
             val position = adapterPosition
             if (position != RecyclerView.NO_POSITION) {
                 listener.onItemClick(position)
             }
-
         }
     }
-        interface OnItemClickListener{
-            fun onItemClick(position: Int)
-        }
-
-
+    interface OnItemClickListener{
+        fun onItemClick(position: Int)
     }
-
+}
\ No newline at end of file
Index: app/src/main/java/sheridan/capstone/findmyfarmer/Farmer/View/FarmerHub.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sheridan.capstone.findmyfarmer.Farmer.View\r\n\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.FragmentManager\r\nimport androidx.fragment.app.FragmentTransaction\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport sheridan.capstone.findmyfarmer.Customer.Controller.FarmerGenerateList\r\nimport sheridan.capstone.findmyfarmer.Customer.Controller.FarmerListToView\r\nimport sheridan.capstone.findmyfarmer.Customer.Model.SharedViewModel\r\nimport sheridan.capstone.findmyfarmer.Customer.View.FarmerInfo\r\nimport sheridan.capstone.findmyfarmer.Farmer.Controller.GenerateHubList\r\nimport sheridan.capstone.findmyfarmer.Farmer.Controller.HubListToView\r\nimport sheridan.capstone.findmyfarmer.R\r\n\r\n\r\nclass FarmerHub : Fragment(),HubListToView.OnItemClickListener {\r\n\r\n\r\n    var GenerateController: GenerateHubList = GenerateHubList()\r\n\r\n    private lateinit var viewModel: SharedViewModel\r\n\r\n    val List = GenerateController.GenerateListHub(3)\r\n\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n\r\n        val view: View = inflater.inflate(R.layout.fragment_farmer_hub, container, false)\r\n\r\n\r\n        val recycleView: RecyclerView = view.findViewById(R.id.Hub_Recycle_View)\r\n\r\n        recycleView.adapter =\r\n            HubListToView(\r\n                List, this\r\n            )\r\n\r\n        recycleView.layoutManager = LinearLayoutManager(context)\r\n        recycleView.setHasFixedSize(true)\r\n\r\n        return view\r\n\r\n    }\r\n\r\n    override fun onItemClick(position: Int) {\r\n\r\n        val Image = List[position].imageResouce\r\n        val Farmer_Name = List[position].Farmer_Name\r\n        val Farmer_Desc = List[position].Farmer_Desc\r\n        val Farmer_City = List[position].Farmer_City\r\n\r\n\r\n        viewModel.setImage(Image)\r\n        viewModel.setFarmer_Name(Farmer_Name)\r\n        viewModel.setFarmer_Desc(Farmer_Desc)\r\n        viewModel.setFarmer_City(Farmer_City)\r\n\r\n\r\n\r\n        val FragmentManager : FragmentManager? = activity?.supportFragmentManager\r\n        val fragmentTransaction : FragmentTransaction? = FragmentManager?.beginTransaction()\r\n        fragmentTransaction?.replace(R.id.fragment_container,\r\n            FarmManager(),\r\n        )\r\n            ?.commit()\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        viewModel = ViewModelProvider(requireActivity()).get(SharedViewModel::class.java)\r\n        viewModel.getFarmer_Name()\r\n        viewModel.getFarmer_City()\r\n        viewModel.getFarmer_Desc()\r\n        viewModel.getFarmer_Rating()\r\n        viewModel.getImage()\r\n        viewModel.getFarmers_Followers()\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sheridan/capstone/findmyfarmer/Farmer/View/FarmerHub.kt	(revision eeade8116719d756d0b10fe29f2f940f1eb2593d)
+++ app/src/main/java/sheridan/capstone/findmyfarmer/Farmer/View/FarmerHub.kt	(date 1606683066304)
@@ -10,8 +10,6 @@
 import androidx.lifecycle.ViewModelProvider
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
-import sheridan.capstone.findmyfarmer.Customer.Controller.FarmerGenerateList
-import sheridan.capstone.findmyfarmer.Customer.Controller.FarmerListToView
 import sheridan.capstone.findmyfarmer.Customer.Model.SharedViewModel
 import sheridan.capstone.findmyfarmer.Customer.View.FarmerInfo
 import sheridan.capstone.findmyfarmer.Farmer.Controller.GenerateHubList
Index: app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/FollowingList.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sheridan.capstone.findmyfarmer.Customer.Controller\r\n\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.RatingBar\r\nimport android.widget.TextView\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.makeramen.roundedimageview.RoundedImageView\r\nimport kotlinx.android.synthetic.main.farmer_listing.view.*\r\nimport sheridan.capstone.findmyfarmer.R\r\nimport sheridan.capstone.findmyfarmer.Customer.Model.ListData\r\n\r\nclass FollowingList (private val FavoritList: List<ListData>, private val listener: OnItemClickListener)\r\n    : RecyclerView.Adapter<FollowingList.MyViewHolder>() {\r\n\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {\r\n        val itemView = LayoutInflater.from(parent.context).inflate(\r\n            R.layout.fragment_following,\r\n            parent, false\r\n        )\r\n        return MyViewHolder(\r\n            itemView\r\n        )\r\n    }\r\n\r\n    override fun getItemCount() = FavoritList.size\r\n\r\n    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {\r\n\r\n\r\n        val currentItem = FavoritList.get(position)\r\n        holder.imageView.setImageResource(currentItem.imageResouce)\r\n        holder.Farmer_Name.text = currentItem.Farmer_Name\r\n        holder.Farmers_Desc.text = currentItem.Farmer_Desc\r\n        holder.Rating.rating = currentItem.Farmer_Rating\r\n        holder.Farmer_City.text = currentItem.Farmer_City\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView),View.OnClickListener {\r\n\r\n\r\n        val imageView: RoundedImageView = itemView.ImageView\r\n        val Farmer_Name: TextView = itemView.Name\r\n        val Farmers_Desc: TextView = itemView.Desc\r\n        val Rating: RatingBar = itemView.rating\r\n        val Farmer_City: TextView = itemView.City\r\n\r\n\r\n\r\n\r\n        init {\r\n            itemView.setOnClickListener(this)\r\n        }\r\n\r\n\r\n        override fun onClick(v: View?) {\r\n            val position = adapterPosition\r\n            if (position != RecyclerView.NO_POSITION) {\r\n                listener.onItemClick(position)\r\n            }\r\n\r\n        }\r\n    }\r\n    interface OnItemClickListener{\r\n        fun onItemClick(position: Int)\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/FollowingList.kt	(revision eeade8116719d756d0b10fe29f2f940f1eb2593d)
+++ app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/FollowingList.kt	(date 1606682880990)
@@ -8,11 +8,11 @@
 import androidx.recyclerview.widget.RecyclerView
 import com.makeramen.roundedimageview.RoundedImageView
 import kotlinx.android.synthetic.main.farmer_listing.view.*
+import sheridan.capstone.findmyfarmer.Entities.Farm
 import sheridan.capstone.findmyfarmer.R
-import sheridan.capstone.findmyfarmer.Customer.Model.ListData
 
-class FollowingList (private val FavoritList: List<ListData>, private val listener: OnItemClickListener)
-    : RecyclerView.Adapter<FollowingList.MyViewHolder>() {
+class FollowingListToView (private val FavoritList: List<Farm>, private val listener: OnItemClickListener)
+    : RecyclerView.Adapter<FollowingListToView.MyViewHolder>() {
 
 
     override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {
@@ -29,23 +29,14 @@
 
     override fun onBindViewHolder(holder: MyViewHolder, position: Int) {
 
-
         val currentItem = FavoritList.get(position)
-        holder.imageView.setImageResource(currentItem.imageResouce)
-        holder.Farmer_Name.text = currentItem.Farmer_Name
-        holder.Farmers_Desc.text = currentItem.Farmer_Desc
-        holder.Rating.rating = currentItem.Farmer_Rating
-        holder.Farmer_City.text = currentItem.Farmer_City
-
-
-
-
+        holder.imageView.setImageBitmap(currentItem.primaryImage)
+        holder.Farmer_Name.text = currentItem.businessName
+        holder.Farmers_Desc.text = currentItem.businessDescription
+        holder.Rating.rating = currentItem.businessRating
+        holder.Farmer_City.text = currentItem.city
 
     }
-
-
-
-
 
     inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView),View.OnClickListener {
 
@@ -57,8 +48,6 @@
         val Farmer_City: TextView = itemView.City
 
 
-
-
         init {
             itemView.setOnClickListener(this)
         }
@@ -77,4 +66,4 @@
     }
 
 
-}
+}
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Fri Nov 13 16:01:12 EST 2020\r\ndistributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-6.5-bin.zip\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>windows-1252
===================================================================
--- gradle/wrapper/gradle-wrapper.properties	(revision eeade8116719d756d0b10fe29f2f940f1eb2593d)
+++ gradle/wrapper/gradle-wrapper.properties	(date 1606682127324)
@@ -1,6 +1,6 @@
-#Fri Nov 13 16:01:12 EST 2020
+#Sun Nov 29 15:35:27 EST 2020
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-6.5-all.zip
Index: app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/ImageListToView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/ImageListToView.kt	(date 1606683081399)
+++ app/src/main/java/sheridan/capstone/findmyfarmer/Customer/Controller/ImageListToView.kt	(date 1606683081399)
@@ -0,0 +1,50 @@
+package sheridan.capstone.findmyfarmer.Customer.Controller
+
+import android.graphics.Bitmap
+import android.view.LayoutInflater
+import android.view.View
+import android.view.ViewGroup
+import android.widget.ImageView
+import androidx.recyclerview.widget.RecyclerView
+import com.makeramen.roundedimageview.RoundedImageView
+import kotlinx.android.synthetic.main.farmer_listing.view.*
+import kotlinx.android.synthetic.main.imagelist_custom_row.view.*
+import sheridan.capstone.findmyfarmer.R
+
+class ImageListToView (private val imageList: List<Bitmap>, private val listener: ImageListToView.OnItemClickListener)
+    : RecyclerView.Adapter<ImageListToView.MyViewHolder>(){
+
+    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): MyViewHolder {
+        val itemView = LayoutInflater.from(parent.context).inflate(R.layout.imagelist_custom_row, parent, false)
+        return MyViewHolder(
+            itemView
+        )
+    }
+
+    override fun onBindViewHolder(holder: MyViewHolder, position: Int) {
+        holder.imageView.setImageBitmap(imageList[position])
+    }
+
+    override fun getItemCount(): Int {
+        return imageList.size
+    }
+
+    inner class MyViewHolder(itemView: View) : RecyclerView.ViewHolder(itemView), View.OnClickListener {
+
+        val imageView: ImageView = itemView.imagedisplay
+
+        init {
+            itemView.setOnClickListener(this)
+        }
+
+        override fun onClick(v: View?) {
+            val position = adapterPosition
+            if (position != RecyclerView.NO_POSITION) {
+                listener.onItemClick(position)
+            }
+        }
+    }
+    interface OnItemClickListener{
+        fun onItemClick(position: Int)
+    }
+}
\ No newline at end of file
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>apply plugin: 'com.android.application'\r\napply plugin: 'kotlin-android'\r\napply plugin: 'kotlin-android-extensions'\r\napply plugin: 'com.google.gms.google-services'\r\n\r\nandroid {\r\n    compileSdkVersion 29\r\n\r\n    defaultConfig {\r\n        applicationId \"sheridan.capstone.findmyfarmer\"\r\n        minSdkVersion 23\r\n        targetSdkVersion 29\r\n        vectorDrawables.useSupportLibrary = true\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n\r\n    kotlinOptions {\r\n        jvmTarget = JavaVersion.VERSION_1_8.toString()\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'com.google.android.gms:play-services-maps:17.0.0'\r\n    def nav_version = \"2.3.1\"\r\n    def lifecycle_version = \"2.2.0\"\r\n    def arch_version = \"2.1.0\"\r\n\r\n    // ViewModel\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\"\r\n    // LiveData\r\n    implementation \"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version\"\r\n    // Saved state module for ViewModel\r\n    implementation \"androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycle_version\"\r\n\r\n\r\n    implementation fileTree(dir: \"libs\", include: [\"*.jar\"])\r\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\r\n    implementation 'androidx.core:core-ktx:1.3.2'\r\n    implementation 'androidx.appcompat:appcompat:1.2.0'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\r\n    implementation 'com.google.android.material:material:1.2.1'\r\n    testImplementation 'junit:junit:4.13.1'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\r\n    implementation 'com.firebaseui:firebase-ui-auth:5.0.0'\r\n    implementation 'com.google.firebase:firebase-analytics-ktx:18.0.0'\r\n    implementation 'com.google.firebase:firebase-auth-ktx:20.0.1'\r\n    implementation 'com.google.android.gms:play-services-auth:19.0.0'\r\n    implementation \"com.google.android.material:material:1.3.0-alpha03\"\r\n    implementation 'com.facebook.android:facebook-android-sdk:5.15.3'\r\n\r\n\r\n    implementation platform('com.google.firebase:firebase-bom:25.12.0')\r\n    implementation 'com.google.firebase:firebase-auth-ktx'\r\n    implementation 'androidx.recyclerview:recyclerview:1.1.0'\r\n    implementation 'androidx.cardview:cardview:1.0.0'\r\n\r\n    implementation 'com.makeramen:roundedimageview:2.3.0'\r\n    implementation \"androidx.navigation:navigation-fragment-ktx:$nav_version\"\r\n    implementation \"androidx.navigation:navigation-ui-ktx:$nav_version\"\r\n    // Feature module Support\r\n    implementation \"androidx.navigation:navigation-dynamic-features-fragment:$nav_version\"\r\n\r\n    // Testing Navigation\r\n    androidTestImplementation \"androidx.navigation:navigation-testing:$nav_version\"\r\n\r\n    //noinspection GradleCompatible\r\n    implementation \"com.android.support:appcompat-v7:28.0.0\"\r\n    //noinspection GradleCompatible\r\n    implementation \"com.android.support:design:28.0.0\"\r\n    // Jetpack Compose Integration\r\n    implementation \"androidx.navigation:navigation-compose:1.0.0-alpha02\"\r\n\r\n    implementation group: 'com.android.volley', name: 'volley', version: '1.1.1'\r\n    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.3'\r\n\r\n    implementation 'android.arch.lifecycle:extensions:1.1.1'\r\n\r\n    implementation 'com.google.android.gms:play-services-maps:17.0.0'\r\n\r\n    implementation 'com.etebarian:meow-bottom-navigation:1.0.0'\r\n}\r\napply plugin: \"androidx.navigation.safeargs.kotlin\"\r\napply plugin: 'com.google.gms.google-services'\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision eeade8116719d756d0b10fe29f2f940f1eb2593d)
+++ app/build.gradle	(date 1606682109801)
@@ -53,19 +53,19 @@
 
     implementation fileTree(dir: "libs", include: ["*.jar"])
     implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
-    implementation 'androidx.core:core-ktx:1.3.2'
+    implementation 'androidx.core:core-ktx:1.3.1'
     implementation 'androidx.appcompat:appcompat:1.2.0'
-    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
+    implementation 'androidx.constraintlayout:constraintlayout:2.0.1'
     implementation 'com.google.android.material:material:1.2.1'
-    testImplementation 'junit:junit:4.13.1'
+    testImplementation 'junit:junit:4.12'
     androidTestImplementation 'androidx.test.ext:junit:1.1.2'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
     implementation 'com.firebaseui:firebase-ui-auth:5.0.0'
-    implementation 'com.google.firebase:firebase-analytics-ktx:18.0.0'
-    implementation 'com.google.firebase:firebase-auth-ktx:20.0.1'
-    implementation 'com.google.android.gms:play-services-auth:19.0.0'
-    implementation "com.google.android.material:material:1.3.0-alpha03"
-    implementation 'com.facebook.android:facebook-android-sdk:5.15.3'
+    implementation 'com.google.firebase:firebase-analytics-ktx:17.5.0'
+    implementation 'com.google.firebase:firebase-auth-ktx:19.4.0'
+    implementation 'com.google.android.gms:play-services-auth:18.1.0'
+    implementation "com.google.android.material:material:1.0.0-rc01"
+    implementation 'com.facebook.android:facebook-android-sdk:[5,6)'
 
 
     implementation platform('com.google.firebase:firebase-bom:25.12.0')
@@ -87,16 +87,19 @@
     //noinspection GradleCompatible
     implementation "com.android.support:design:28.0.0"
     // Jetpack Compose Integration
-    implementation "androidx.navigation:navigation-compose:1.0.0-alpha02"
+    implementation "androidx.navigation:navigation-compose:1.0.0-alpha01"
 
     implementation group: 'com.android.volley', name: 'volley', version: '1.1.1'
     implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.3'
-
+    implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
     implementation 'android.arch.lifecycle:extensions:1.1.1'
 
-    implementation 'com.google.android.gms:play-services-maps:17.0.0'
+    implementation 'com.google.android.gms:play-services-maps:16.1.0'
+
+    implementation 'com.google.firebase:firebase-storage'
+    implementation platform('com.google.firebase:firebase-bom:26.1.0')
 
     implementation 'com.etebarian:meow-bottom-navigation:1.0.0'
 }
 apply plugin: "androidx.navigation.safeargs.kotlin"
-apply plugin: 'com.google.gms.google-services'
+apply plugin: 'com.google.gms.google-services'
\ No newline at end of file
Index: app/src/main/java/sheridan/capstone/findmyfarmer/Customer/View/MarketPlace.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package sheridan.capstone.findmyfarmer.Customer.View\r\n\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport androidx.fragment.app.FragmentManager\r\nimport androidx.fragment.app.FragmentTransaction\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport sheridan.capstone.findmyfarmer.R\r\nimport sheridan.capstone.findmyfarmer.Customer.Controller.FarmerGenerateList\r\nimport sheridan.capstone.findmyfarmer.Customer.Controller.FarmerListToView\r\nimport sheridan.capstone.findmyfarmer.Customer.Model.SharedViewModel\r\nimport sheridan.capstone.findmyfarmer.Farmer.View.FarmManager\r\n\r\n\r\nclass MarketPlace : Fragment(),\r\n    FarmerListToView.OnItemClickListener {\r\n\r\n    var FarmerController : FarmerGenerateList =\r\n        FarmerGenerateList()\r\n\r\n\r\n    private lateinit var viewModel : SharedViewModel\r\n    val List = FarmerController.GenerateList(5)\r\n\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n\r\n    ): View? {\r\n        val View : View = inflater.inflate(R.layout.fragment_market_place, container, false)\r\n\r\n        val recycleView : RecyclerView = View.findViewById(R.id.recycleView)\r\n\r\n            recycleView.adapter =\r\n                FarmerListToView(\r\n                    List, this\r\n                )\r\n\r\n        recycleView.layoutManager = LinearLayoutManager(context)\r\n        recycleView.setHasFixedSize(true)\r\n\r\n        return View\r\n\r\n    }\r\n    override fun onItemClick(position: Int) {\r\n\r\n        val Image = List[position].imageResouce\r\n        val Farmer_Name = List[position].Farmer_Name\r\n        val Farmer_Desc = List[position].Farmer_Desc\r\n        val Farmer_Rat = List[position].Farmer_Rating\r\n        val Farmer_City = List[position].Farmer_City\r\n\r\n        viewModel.setImage(Image)\r\n        viewModel.setFarmer_Name(Farmer_Name)\r\n        viewModel.setFarmer_Desc(Farmer_Desc)\r\n        viewModel.setFarmer_Rat(Farmer_Rat)\r\n        viewModel.setFarmer_City(Farmer_City)\r\n\r\n        val FragmentManager : FragmentManager? = activity?.supportFragmentManager\r\n        val fragmentTransaction : FragmentTransaction? = FragmentManager?.beginTransaction()\r\n        fragmentTransaction?.replace(R.id.fragment_container,\r\n          FarmerInfo()\r\n        )\r\n            ?.commit()\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        viewModel = ViewModelProvider(requireActivity()).get(SharedViewModel::class.java)\r\n\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/sheridan/capstone/findmyfarmer/Customer/View/MarketPlace.kt	(revision eeade8116719d756d0b10fe29f2f940f1eb2593d)
+++ app/src/main/java/sheridan/capstone/findmyfarmer/Customer/View/MarketPlace.kt	(date 1606682979231)
@@ -11,10 +11,8 @@
 import androidx.recyclerview.widget.LinearLayoutManager
 import androidx.recyclerview.widget.RecyclerView
 import sheridan.capstone.findmyfarmer.R
-import sheridan.capstone.findmyfarmer.Customer.Controller.FarmerGenerateList
 import sheridan.capstone.findmyfarmer.Customer.Controller.FarmerListToView
 import sheridan.capstone.findmyfarmer.Customer.Model.SharedViewModel
-import sheridan.capstone.findmyfarmer.Farmer.View.FarmManager
 
 
 class MarketPlace : Fragment(),
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_24_2020_11_34_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_24_2020_11_34_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Merge_at_11_23_2020_3_19_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Merge_at_11_23_2020_3_19_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_26_2020_12_53_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_26_2020_12_53_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_26_2020_2_00_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_26_2020_2_00_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_26_2020_1_36_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_26_2020_1_36_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_23_2020_2_39_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_23_2020_2_39_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_24_2020_1_42_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_24_2020_1_42_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_25_2020_11_39_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_25_2020_11_39_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_9_2020_6_02_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_9_2020_6_02_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_25_2020_11_40_PM__Default_Changelist_1.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_25_2020_11_40_PM__Default_Changelist_1.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_11_23_2020_2_32_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_11_23_2020_2_32_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Merge_at_11_26_2020_2_00_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Merge_at_11_26_2020_2_00_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_28_2020_3_09_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_28_2020_3_09_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Merge_at_11_23_2020_6_20_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Merge_at_11_23_2020_6_20_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_11_8_2020_6_27_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_11_8_2020_6_27_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_26_2020_1_59_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_26_2020_1_59_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_25_2020_11_40_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_25_2020_11_40_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_26_2020_1_59_AM__Default_Changelist_1.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_26_2020_1_59_AM__Default_Changelist_1.xml
diff --git .idea/shelf/Uncommitted_changes_before_Checkout_at_11_24_2020_2_50_PM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Checkout_at_11_24_2020_2_50_PM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_11_8_2020_6_27_PM__Default_Changelist_1.xml .idea/shelf/Uncommitted_changes_before_Update_at_11_8_2020_6_27_PM__Default_Changelist_1.xml
diff --git .idea/shelf/Uncommitted_changes_before_Update_at_11_24_2020_11_41_AM__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_Update_at_11_24_2020_11_41_AM__Default_Changelist_.xml
diff --git .idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_.xml .idea/shelf/Uncommitted_changes_before_rebase__Default_Changelist_.xml
